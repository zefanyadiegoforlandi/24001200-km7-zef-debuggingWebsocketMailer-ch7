<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.tailwindcss.com"></script>
  <title>Reset Password</title>
</head>
<body class="flex items-center justify-center h-screen bg-gray-100">
  <div class="bg-white p-8 rounded-lg shadow-lg w-full max-w-md">
    <h1 class="text-2xl font-semibold mb-6 text-center">Reset Password</h1>
    <form id="resetForm" class="space-y-4">
      <input type="hidden" name="newToken" value="<%= newToken %>" />
      <div>
        <label for="password" class="block text-gray-700">New Password</label>
        <input 
          type="password" 
          id="password" 
          name="newPassword" 
          required 
          class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:border-blue-500"
          placeholder="Enter your new password"
        >
      </div>
      <div>
        <label for="confirmPassword" class="block text-gray-700">Confirm Password</label>
        <input 
          type="password" 
          id="confirmPassword" 
          name="confirmPassword" 
          required 
          class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:border-blue-500"
          placeholder="Confirm your new password"
        >
      </div>
      <button 
        type="submit" 
        class="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600"
      >
        Reset Password
      </button>
    </form>
    
    <div id="notification" class="hidden p-4 mt-4 text-white rounded">
      <p id="notificationMessage"></p>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io('http://localhost:3000');

    socket.on('notification', (message) => {
        const notification = document.getElementById('notification');
        const notificationMessage = document.getElementById('notificationMessage');

        notification.classList.remove('hidden');
        notification.classList.remove('bg-red-500', 'bg-yellow-500', 'bg-green-500');

        if (message.toLowerCase().includes('success')) {
            notification.classList.add('bg-green-500');
        } else if (message.toLowerCase().includes('wait')) {
            notification.classList.add('bg-yellow-500');
        } else {
            notification.classList.add('bg-red-500');
        }

        notificationMessage.textContent = message;
    });

    document.getElementById('resetForm').addEventListener('submit', function(event) {
        event.preventDefault();

        const newPassword = document.getElementById('password').value;
        const confirmPassword = document.getElementById('confirmPassword').value;

        if (newPassword !== confirmPassword) {
            socket.emit('notification', 'Passwords do not match!', 'error');
            return;
        }

        const formData = new FormData(this);
        const data = {
            newToken: formData.get('newToken'),
            newPassword: formData.get('newPassword'),
            confirmPassword: formData.get('confirmPassword')
        };

        socket.emit('notification', 'Please wait, resetting your password...', 'warning');

        fetch('/api/password/reset-password', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (response.ok) {
                socket.emit('notification', 'Password reset successfully!', 'success');
                setTimeout(() => window.location.href = '/login', 1000);
            } else {
                response.json().then(data => {
                    socket.emit('notification', data.message || 'Error resetting password!', 'error');
                });
            }
        })
        .catch(() => {
            socket.emit('notification', 'Error resetting password!', 'error');
        });
    });
  </script>

</body>
</html>
